// Generated by `ts-to-zod` / https://www.npmjs.com/package/ts-to-zod / https://zod.dev/

// ############################################################################################################
// ########################### ZOD schema of the messaging api for the whole system ###########################
// ############################################################################################################
import { z } from "zod";

// Value objects
export const schemaVersionSchema = z.number();

export const restaurantIdSchema = z.string();

export const orderIdSchema = z.string();

export const menuItemIdSchema = z.string();

export const restaurantNameSchema = z.string();

export const restaurantMenuIdSchema = z.string();

export const menuItemNameSchema = z.string();

export const menuItemPriceSchema = z.string();

export const reasonSchema = z.union([
  z.literal("Restaurant already exist!"),
  z.literal("Restaurant does not exist!"),
  z.literal("Order already exist!"),
  z.literal("Order does not exist!"),
]);

export const restaurantMenuCuisineSchema = z.union([
  z.literal("GENERAL"),
  z.literal("SERBIAN"),
  z.literal("ITALIAN"),
  z.literal("MEXICAN"),
  z.literal("CHINESE"),
  z.literal("INDIAN"),
  z.literal("FRENCH"),
]);

export const menuItemSchema = z.object({
  menuItemId: menuItemIdSchema,
  name: menuItemNameSchema,
  price: menuItemPriceSchema,
});

export const restaurantMenuSchema = z.object({
  menuItems: z.array(menuItemSchema),
  menuId: restaurantMenuIdSchema,
  cuisine: restaurantMenuCuisineSchema,
});

// ############# Restaurant #############
// #############  commands  #############
export const createRestaurantCommandSchema = z.object({
  decider: z.literal("Restaurant"),
  kind: z.literal("CreateRestaurantCommand"),
  id: restaurantIdSchema,
  name: restaurantNameSchema,
  menu: restaurantMenuSchema,
});

export const changeRestaurantMenuCommandSchema = z.object({
  decider: z.literal("Restaurant"),
  kind: z.literal("ChangeRestaurantMenuCommand"),
  id: restaurantIdSchema,
  menu: restaurantMenuSchema,
});

export const placeOrderCommandSchema = z.object({
  decider: z.literal("Restaurant"),
  kind: z.literal("PlaceOrderCommand"),
  id: restaurantIdSchema,
  orderId: orderIdSchema,
  menuItems: z.array(menuItemSchema),
});

// #############  events  #############
export const restaurantCreatedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantCreatedEvent"),
  id: restaurantIdSchema,
  name: restaurantNameSchema,
  menu: restaurantMenuSchema,
  final: z.boolean(),
});

export const restaurantNotCreatedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantNotCreatedEvent"),
  id: restaurantIdSchema,
  name: restaurantNameSchema,
  menu: restaurantMenuSchema,
  reason: reasonSchema,
  final: z.boolean(),
});

export const restaurantMenuChangedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantMenuChangedEvent"),
  id: restaurantIdSchema,
  menu: restaurantMenuSchema,
  final: z.boolean(),
});

export const restaurantMenuNotChangedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantMenuNotChangedEvent"),
  id: restaurantIdSchema,
  menu: restaurantMenuSchema,
  reason: reasonSchema,
  final: z.boolean(),
});

export const restaurantOrderPlacedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantOrderPlacedEvent"),
  id: restaurantIdSchema,
  orderId: orderIdSchema,
  menuItems: z.array(menuItemSchema),
  final: z.boolean(),
});

export const restaurantOrderNotPlacedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Restaurant"),
  kind: z.literal("RestaurantOrderNotPlacedEvent"),
  id: restaurantIdSchema,
  orderId: orderIdSchema,
  menuItems: z.array(menuItemSchema),
  reason: reasonSchema,
  final: z.boolean(),
});

export const restaurantSchema = z.object({
  restaurantId: restaurantIdSchema,
  name: restaurantNameSchema,
  menu: restaurantMenuSchema,
});

// #############  queries  #############
export const findRestaurantByIdQuerySchema = z.object({
  kind: z.literal("FindRestaurantByIdQuery"),
  id: restaurantIdSchema,
});

export const findAllRestaurantsQuerySchema = z.object({
  kind: z.literal("FindAllRestaurantsQuery"),
});

// ############### Order ################
// #############  commands  #############
export const createOrderCommandSchema = z.object({
  decider: z.literal("Order"),
  kind: z.literal("CreateOrderCommand"),
  id: orderIdSchema,
  restaurantId: restaurantIdSchema,
  menuItems: z.array(menuItemSchema),
});

export const markOrderAsPreparedCommandSchema = z.object({
  decider: z.literal("Order"),
  kind: z.literal("MarkOrderAsPreparedCommand"),
  id: orderIdSchema,
});

// ############# events #############
export const orderCreatedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Order"),
  kind: z.literal("OrderCreatedEvent"),
  id: orderIdSchema,
  restaurantId: restaurantIdSchema,
  menuItems: z.array(menuItemSchema),
  final: z.boolean(),
});

export const orderNotCreatedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Order"),
  kind: z.literal("OrderNotCreatedEvent"),
  id: orderIdSchema,
  restaurantId: restaurantIdSchema,
  reason: reasonSchema,
  menuItems: z.array(menuItemSchema),
  final: z.boolean(),
});

export const orderPreparedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Order"),
  kind: z.literal("OrderPreparedEvent"),
  id: orderIdSchema,
  final: z.boolean(),
});

export const orderNotPreparedEventSchema = z.object({
  version: schemaVersionSchema,
  decider: z.literal("Order"),
  kind: z.literal("OrderNotPreparedEvent"),
  id: orderIdSchema,
  reason: reasonSchema,
  final: z.boolean(),
});

// ############# queries #############
export const findOrderByIdQuerySchema = z.object({
  kind: z.literal("FindOrderByIdQuery"),
  id: orderIdSchema,
});

export const findAllOrdersQuerySchema = z.object({
  kind: z.literal("FindAllOrdersQuery"),
});

export const orderStatusSchema = z.union([
  z.literal("NOT_CREATED"),
  z.literal("CREATED"),
  z.literal("PREPARED"),
]);

export const orderViewSchema = z.object({
  orderId: orderIdSchema,
  restaurantId: restaurantIdSchema,
  menuItems: z.array(menuItemSchema),
  status: orderStatusSchema,
});

// Discriminated union of all Restaurant commands
export const restaurantCommandSchema = z.discriminatedUnion("kind", [
  createRestaurantCommandSchema,
  changeRestaurantMenuCommandSchema,
  placeOrderCommandSchema,
]);
// Discriminated union of all  Restaurant events
export const restaurantEventSchema = z.discriminatedUnion("kind", [
  restaurantCreatedEventSchema,
  restaurantNotCreatedEventSchema,
  restaurantMenuChangedEventSchema,
  restaurantMenuNotChangedEventSchema,
  restaurantOrderPlacedEventSchema,
  restaurantOrderNotPlacedEventSchema,
]);

// Discriminated union of all Order commands
export const orderCommandSchema = z.discriminatedUnion("kind", [
  createOrderCommandSchema,
  markOrderAsPreparedCommandSchema,
]);
// Discriminated union of all Order events
export const orderEventSchema = z.discriminatedUnion("kind", [
  orderCreatedEventSchema,
  orderNotCreatedEventSchema,
  orderPreparedEventSchema,
  orderNotPreparedEventSchema,
]);

// The state of the Order decider/aggregate
export const orderSchema = z.object({
  orderId: orderIdSchema,
  restaurantId: restaurantIdSchema,
  menuItems: z.array(menuItemSchema),
  status: orderStatusSchema,
});

// Discriminated union of All commands (Restaurant and Order)
export const commandSchema = z.discriminatedUnion("kind", [
  createRestaurantCommandSchema,
  changeRestaurantMenuCommandSchema,
  placeOrderCommandSchema,
  createOrderCommandSchema,
  markOrderAsPreparedCommandSchema,
]);
// Discriminated union of All events (Restaurant and Order)
export const eventSchema = z.discriminatedUnion("kind", [
  restaurantCreatedEventSchema,
  restaurantNotCreatedEventSchema,
  restaurantMenuChangedEventSchema,
  restaurantMenuNotChangedEventSchema,
  restaurantOrderPlacedEventSchema,
  restaurantOrderNotPlacedEventSchema,
  orderCreatedEventSchema,
  orderNotCreatedEventSchema,
  orderPreparedEventSchema,
  orderNotPreparedEventSchema,
]);
// Discriminated union of All queries
export const querySchema = z.discriminatedUnion("kind", [
  findRestaurantByIdQuerySchema,
  findAllRestaurantsQuerySchema,
  findOrderByIdQuerySchema,
  findAllOrdersQuerySchema,
]);

// Command metadata
export const commandMetadataSchema = z.object({
  tenant: z.string().optional(),
  commandId: z.string(),
});
// Event metadata
export const eventMetadataSchema = z.object({
  // tenant: z.string(),
  eventId: z.string(),
  commandId: z.string(),
  // offset: z.number(),
});
// Query metadata
export const queryMetadataSchema = z.object({
  tenant: z.string().optional(),
  queryId: z.string(),
});

// Commands and metadata
export const commandAndMetadataSchema = z.intersection(
  commandSchema,
  commandMetadataSchema,
);
// Events and metadata
export const eventAndMetadataSchema = z.intersection(
  eventSchema,
  eventMetadataSchema,
);

// Events and metadata
export const eventAndMetadataWithViewSchema = z.intersection(
  eventAndMetadataSchema,
  z.object({
    view: z.string(),
  }),
);
// Queries and metadata
export const queryAndMetadataSchema = z.intersection(
  querySchema,
  queryMetadataSchema,
);
